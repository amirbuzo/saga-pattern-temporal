version: '3.8'
services:
  mongo-server:
    image: mongo:5.0
    container_name: mongo-server
    ports:
      - "27017:27017"
    volumes:
      - ~/apps/mongo:/data/db
#    environment:
#      - MONGO_INITDB_ROOT_USERNAME=root
#      - MONGO_INITDB_ROOT_PASSWORD=root
    networks:
      - temporal-network
  bitbucket-service:
    image: saga/bitbucket-service
    container_name: bitbucket-service
    build: ./bitbucket-service
    ports:
      - 8083:8083
    depends_on:
      - mongo-server
      - temporal
    environment:
      server.port: 8083
      SPRING_PROFILES_ACTIVE: docker
      target: temporal:7233
      spring_data_mongodb_uri: mongodb://mongo-server:27017/bitbucket-service
#      - setup-vault
    networks:
      - temporal-network
  build-service:
    image: saga/build-service
    container_name: build-service
    build: ./build-service
    ports:
      - 8084:8084
    depends_on:
      - mongo-server
      - temporal
    environment:
      server.port: 8084
      SPRING_PROFILES_ACTIVE: docker
      target: temporal:7233
      spring_data_mongodb_uri: mongodb://mongo-server:27017/build-service
#      - setup-vault
    networks:
      - temporal-network
  orchestrator-service:
    image: saga/orchestrator-service
    container_name: orchestrator-service
    build: ./orchestrator-service
    ports:
      - "8081:8081"
    depends_on:
      - mongo-server
      - temporal
    environment:
      server.port: 8081
      SPRING_PROFILES_ACTIVE: docker
      target: temporal:7233
      spring_data_mongodb_uri: mongodb://mongo-server:27017/orchestrator-service
#      - setup-vault
    networks:
      - temporal-network
  sonar-service:
    image: saga/sonar-service
    container_name: sonar-service
    build: ./sonar-service
    ports:
      - "8082:8082"
    depends_on:
      - mongo-server
      - temporal
    environment:
      server.port: 8082
      SPRING_PROFILES_ACTIVE: docker
      target: temporal:7233
      spring_data_mongodb_uri: mongodb://mongo-server:27017/sonar-service
#      - setup-vault
    networks:
      - temporal-network   
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    labels:
      - "traefik.port=16686"
      - "traefik.frontend.rule=Host:jaeger.docker.${DOMAIN:-localhost}"
  traefik:
    image: traefik:maroilles-alpine
    container_name: traefik
    command: --api --docker
    ports:
      - 80:80
    labels:
      - "traefik.port=8080"
      - "traefik.frontend.rule=Host:traefik.docker.${DOMAIN:-localhost}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:9.6
    networks:
      - temporal-network
    ports:
      - 5432:5432
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
    image: temporalio/auto-setup:1.11.2
    networks:
      - temporal-network
    ports:
      - 7233:7233
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:1.11.2
    networks:
      - temporal-network
    stdin_open: true
    tty: true
  temporal-web:
    container_name: temporal-web
    depends_on:
      - temporal
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
    image: temporalio/web:1.10.0
    networks:
      - temporal-network
    ports:
      - 8088:8088
networks:
  temporal-network:
    driver: bridge
    name: temporal-network	  